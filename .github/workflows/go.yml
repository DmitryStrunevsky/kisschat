# This workflow builds binaries for Linux and Windows, packages them, and creates a GitHub release
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Build and Release

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.18'

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        if [ "$GOOS" = "windows" ]; then
          go build -o kisschat.exe ./main.go
        else
          go build -o kisschat ./main.go
        fi

    - name: Package Linux binary
      if: matrix.goos == 'linux'
      run: |
        tar -czf kisschat-linux-amd64.tar.gz kisschat
        
    - name: Package Windows binary
      if: matrix.goos == 'windows'
      run: |
        zip kisschat-windows-amd64.zip kisschat.exe

    - name: Upload Linux artifact
      if: matrix.goos == 'linux'
      uses: actions/upload-artifact@v4
      with:
        name: kisschat-linux-amd64
        path: kisschat-linux-amd64.tar.gz

    - name: Upload Windows artifact
      if: matrix.goos == 'windows'
      uses: actions/upload-artifact@v4
      with:
        name: kisschat-windows-amd64
        path: kisschat-windows-amd64.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4

    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: kisschat-linux-amd64
        path: ./artifacts

    - name: Download Windows artifact
      uses: actions/download-artifact@v4
      with:
        name: kisschat-windows-amd64
        path: ./artifacts

    - name: Generate release tag
      id: tag
      run: |
        TAG="v$(date +'%Y%m%d-%H%M%S')-$(echo $GITHUB_SHA | head -c7)"
        echo "tag=$TAG" >> $GITHUB_OUTPUT
        echo "Generated tag: $TAG"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        body: |
          Automated release from commit ${{ github.sha }}
          
          ## Changes
          - Latest changes from main branch
          
          ## Download
          - Linux: kisschat-linux-amd64.tar.gz
          - Windows: kisschat-windows-amd64.zip
        draft: false
        prerelease: false
        files: |
          ./artifacts/kisschat-linux-amd64.tar.gz
          ./artifacts/kisschat-windows-amd64.zip
